// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: parquet/options.proto

package pbparquet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColumnType int32

const (
	ColumnType_UNSPECIFIED_COLUMN_TYPE ColumnType = 0
	ColumnType_UINT256                 ColumnType = 1
	ColumnType_INT256                  ColumnType = 2
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0: "UNSPECIFIED_COLUMN_TYPE",
		1: "UINT256",
		2: "INT256",
	}
	ColumnType_value = map[string]int32{
		"UNSPECIFIED_COLUMN_TYPE": 0,
		"UINT256":                 1,
		"INT256":                  2,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_parquet_options_proto_enumTypes[0].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_parquet_options_proto_enumTypes[0]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_parquet_options_proto_rawDescGZIP(), []int{0}
}

type Compression int32

const (
	Compression_UNCOMPRESSED Compression = 0
	Compression_SNAPPY       Compression = 1
	Compression_GZIP         Compression = 2
	Compression_LZ4_RAW      Compression = 3
	Compression_BROTLI       Compression = 4
	Compression_ZSTD         Compression = 5
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "UNCOMPRESSED",
		1: "SNAPPY",
		2: "GZIP",
		3: "LZ4_RAW",
		4: "BROTLI",
		5: "ZSTD",
	}
	Compression_value = map[string]int32{
		"UNCOMPRESSED": 0,
		"SNAPPY":       1,
		"GZIP":         2,
		"LZ4_RAW":      3,
		"BROTLI":       4,
		"ZSTD":         5,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_parquet_options_proto_enumTypes[1].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_parquet_options_proto_enumTypes[1]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_parquet_options_proto_rawDescGZIP(), []int{1}
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not implemented yet but planned so we reserved the field id now
	// optional string name = 1;
	Type        *ColumnType  `protobuf:"varint,2,opt,name=type,proto3,enum=parquet.ColumnType,oneof" json:"type,omitempty"`
	Compression *Compression `protobuf:"varint,3,opt,name=compression,proto3,enum=parquet.Compression,oneof" json:"compression,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_parquet_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_parquet_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_parquet_options_proto_rawDescGZIP(), []int{0}
}

func (x *Column) GetType() ColumnType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ColumnType_UNSPECIFIED_COLUMN_TYPE
}

func (x *Column) GetCompression() Compression {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return Compression_UNCOMPRESSED
}

var file_parquet_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         14756842,
		Name:          "parquet.table_name",
		Tag:           "bytes,14756842,opt,name=table_name",
		Filename:      "parquet/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         548935,
		Name:          "parquet.ignored",
		Tag:           "varint,548935,opt,name=ignored",
		Filename:      "parquet/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Column)(nil),
		Field:         548936,
		Name:          "parquet.column",
		Tag:           "bytes,548936,opt,name=column",
		Filename:      "parquet/options.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// As long as table_name is not blank,
	// a schema is generated for top-level messages in each file.
	//
	// optional string table_name = 14756842;
	E_TableName = &file_parquet_options_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional bool ignored = 548935;
	E_Ignored = &file_parquet_options_proto_extTypes[1]
	// optional parquet.Column column = 548936;
	E_Column = &file_parquet_options_proto_extTypes[2]
)

var File_parquet_options_proto protoreflect.FileDescriptor

var file_parquet_options_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2a, 0x42, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x49, 0x4e, 0x54, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x54,
	0x32, 0x35, 0x36, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x5a, 0x34, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f,
	0x54, 0x4c, 0x49, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x05, 0x3a,
	0x41, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xea,
	0xd7, 0x84, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x3a, 0x39, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc7, 0xc0, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x3a, 0x4b, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc8, 0xc0, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2d, 0x73, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f,
	0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x3b, 0x70, 0x62, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parquet_options_proto_rawDescOnce sync.Once
	file_parquet_options_proto_rawDescData = file_parquet_options_proto_rawDesc
)

func file_parquet_options_proto_rawDescGZIP() []byte {
	file_parquet_options_proto_rawDescOnce.Do(func() {
		file_parquet_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_parquet_options_proto_rawDescData)
	})
	return file_parquet_options_proto_rawDescData
}

var file_parquet_options_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_parquet_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_parquet_options_proto_goTypes = []any{
	(ColumnType)(0),                     // 0: parquet.ColumnType
	(Compression)(0),                    // 1: parquet.Compression
	(*Column)(nil),                      // 2: parquet.Column
	(*descriptorpb.MessageOptions)(nil), // 3: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 4: google.protobuf.FieldOptions
}
var file_parquet_options_proto_depIdxs = []int32{
	0, // 0: parquet.Column.type:type_name -> parquet.ColumnType
	1, // 1: parquet.Column.compression:type_name -> parquet.Compression
	3, // 2: parquet.table_name:extendee -> google.protobuf.MessageOptions
	4, // 3: parquet.ignored:extendee -> google.protobuf.FieldOptions
	4, // 4: parquet.column:extendee -> google.protobuf.FieldOptions
	2, // 5: parquet.column:type_name -> parquet.Column
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	2, // [2:5] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_parquet_options_proto_init() }
func file_parquet_options_proto_init() {
	if File_parquet_options_proto != nil {
		return
	}
	file_parquet_options_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parquet_options_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_parquet_options_proto_goTypes,
		DependencyIndexes: file_parquet_options_proto_depIdxs,
		EnumInfos:         file_parquet_options_proto_enumTypes,
		MessageInfos:      file_parquet_options_proto_msgTypes,
		ExtensionInfos:    file_parquet_options_proto_extTypes,
	}.Build()
	File_parquet_options_proto = out.File
	file_parquet_options_proto_rawDesc = nil
	file_parquet_options_proto_goTypes = nil
	file_parquet_options_proto_depIdxs = nil
}
