// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Column {
    /// Not implemented yet but planned so we reserved the field id now
    /// optional string name = 1;
    #[prost(enumeration="ColumnType", optional, tag="2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(enumeration="Compression", optional, tag="3")]
    pub compression: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ColumnType {
    UnspecifiedColumnType = 0,
    Uint256 = 1,
    Int256 = 2,
}
impl ColumnType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ColumnType::UnspecifiedColumnType => "UNSPECIFIED_COLUMN_TYPE",
            ColumnType::Uint256 => "UINT256",
            ColumnType::Int256 => "INT256",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED_COLUMN_TYPE" => Some(Self::UnspecifiedColumnType),
            "UINT256" => Some(Self::Uint256),
            "INT256" => Some(Self::Int256),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Compression {
    Uncompressed = 0,
    Snappy = 1,
    Gzip = 2,
    Lz4Raw = 3,
    Brotli = 4,
    Zstd = 5,
}
impl Compression {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Compression::Uncompressed => "UNCOMPRESSED",
            Compression::Snappy => "SNAPPY",
            Compression::Gzip => "GZIP",
            Compression::Lz4Raw => "LZ4_RAW",
            Compression::Brotli => "BROTLI",
            Compression::Zstd => "ZSTD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNCOMPRESSED" => Some(Self::Uncompressed),
            "SNAPPY" => Some(Self::Snappy),
            "GZIP" => Some(Self::Gzip),
            "LZ4_RAW" => Some(Self::Lz4Raw),
            "BROTLI" => Some(Self::Brotli),
            "ZSTD" => Some(Self::Zstd),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
