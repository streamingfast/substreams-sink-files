// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package pq

import (
	"fmt"
	"strings"
)

const (
	// ExpressionKindCurrent is a ExpressionKind of type Current.
	ExpressionKindCurrent ExpressionKind = iota
	// ExpressionKindField is a ExpressionKind of type Field.
	ExpressionKindField
	// ExpressionKindArray is a ExpressionKind of type Array.
	ExpressionKindArray
)

const _ExpressionKindName = "CurrentFieldArray"

var _ExpressionKindNames = []string{
	_ExpressionKindName[0:7],
	_ExpressionKindName[7:12],
	_ExpressionKindName[12:17],
}

// ExpressionKindNames returns a list of possible string values of ExpressionKind.
func ExpressionKindNames() []string {
	tmp := make([]string, len(_ExpressionKindNames))
	copy(tmp, _ExpressionKindNames)
	return tmp
}

var _ExpressionKindMap = map[ExpressionKind]string{
	ExpressionKindCurrent: _ExpressionKindName[0:7],
	ExpressionKindField:   _ExpressionKindName[7:12],
	ExpressionKindArray:   _ExpressionKindName[12:17],
}

// String implements the Stringer interface.
func (x ExpressionKind) String() string {
	if str, ok := _ExpressionKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ExpressionKind(%d)", x)
}

var _ExpressionKindValue = map[string]ExpressionKind{
	_ExpressionKindName[0:7]:   ExpressionKindCurrent,
	_ExpressionKindName[7:12]:  ExpressionKindField,
	_ExpressionKindName[12:17]: ExpressionKindArray,
}

// ParseExpressionKind attempts to convert a string to a ExpressionKind
func ParseExpressionKind(name string) (ExpressionKind, error) {
	if x, ok := _ExpressionKindValue[name]; ok {
		return x, nil
	}
	return ExpressionKind(0), fmt.Errorf("%s is not a valid ExpressionKind, try [%s]", name, strings.Join(_ExpressionKindNames, ", "))
}

// MarshalText implements the text marshaller method
func (x ExpressionKind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ExpressionKind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseExpressionKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
