syntax = "proto3";

// The `sf.substreams.sink.files.v1` package can be use in your Substreams to defined a `map` module
// whose output type will be one of the message defined in the package. The `substreams-sink-files`
// binary will then consume your module's output to create the files containing your extracted data.
//
// The current package supports a single output format which is the `Lines` message which represents
// a list of plain-text "line" that should be appended together in a single bundle.
package sf.substreams.sink.files.testing;

import "google/protobuf/timestamp.proto";
import "parquet/options.proto";

option go_package = "github.com/streamingfast/substreams-sink-files/internal/pb/testing;pbtesting";

message SingleRepeated {
    repeated Row elements = 1;
}

message MultipleRepeated {
    repeated Row table_a = 1;
    repeated Row table_b = 2;
    repeated Row table_c = 3;
}

message FromTablesFlat {
    RowT row = 1;
}

message FromTablesRepeated {
    // Named elements to ensure that tables is still `rows` as defined in RowT parquet.table_name
    repeated RowT elements = 1;
}

message FromTablesRepeatedWithIgnore {
    repeated RowT elements = 1;
    repeated IgnoredRow ignored = 2;
}

message FromTablesNestedFlat {
    NestedFlat nested = 1;
}

message FromTablesNestedRepeated {
    NestedRepeated nested = 1;
}

message NestedFlat {
    RowT row = 1;
}

message NestedRepeated {
    repeated RowT elements = 1;
}

// Keep in sync with the RowT below, they must be kept in sync for tests to work properly
message Row {
    string typeString = 1;
    int32 typeInt32 = 2;
    int64 typeInt64 = 3;
    uint32 typeUint32 = 4;
    uint64 typeUint64 = 5;
    sint32 typeSint32 = 6;
    sint64 typeSint64 = 7;
    fixed32 typeFixed32 = 8;
    fixed64 typeFixed64 = 9;
    sfixed32 typeSfixed32 = 10;
    sfixed64 typeSfixed64 = 11;
    float typeFloat = 12;
    double typeDouble = 13;
    bool typeBool = 14;
    bytes typeBytes = 15;

    google.protobuf.Timestamp typeTimestamp = 16;

    // Ensure ignored is correctly implemented
    bool ignored = 64 [(parquet.ignored) = true];
}

// Kept in sync with the Row message, we use RowT to test the parquet.table_name option
message RowT {
    option (parquet.table_name) = "rows";

    string typeString = 1;
    int32 typeInt32 = 2;
    int64 typeInt64 = 3;
    uint32 typeUint32 = 4;
    uint64 typeUint64 = 5;
    sint32 typeSint32 = 6;
    sint64 typeSint64 = 7;
    fixed32 typeFixed32 = 8;
    fixed64 typeFixed64 = 9;
    sfixed32 typeSfixed32 = 10;
    sfixed64 typeSfixed64 = 11;
    float typeFloat = 12;
    double typeDouble = 13;
    bool typeBool = 14;
    bytes typeBytes = 15;

    google.protobuf.Timestamp typeTimestamp = 16;

    // Ensure ignored is correctly implemented
    bool ignored = 64 [(parquet.ignored) = true];
}

message RowColumnTypeUint256 {
    string amount = 1 [(parquet.column_type) = UINT256];
}

message RowColumnTypeInt256 {
    string positive = 1 [(parquet.column_type) = INT256];
    string negative = 2 [(parquet.column_type) = INT256];
}

message IgnoredRow {
    string id = 1;
}