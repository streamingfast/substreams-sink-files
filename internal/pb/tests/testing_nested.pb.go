// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: tests/testing_nested.proto

package pbtesting

import (
	_ "github.com/streamingfast/substreams-sink-files/pb/parquet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RowColumnNestedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nested        *Nested                `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumnNestedMessage) Reset() {
	*x = RowColumnNestedMessage{}
	mi := &file_tests_testing_nested_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumnNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumnNestedMessage) ProtoMessage() {}

func (x *RowColumnNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_nested_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumnNestedMessage.ProtoReflect.Descriptor instead.
func (*RowColumnNestedMessage) Descriptor() ([]byte, []int) {
	return file_tests_testing_nested_proto_rawDescGZIP(), []int{0}
}

func (x *RowColumnNestedMessage) GetNested() *Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

type RowColumnRepeatedNestedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nested        []*Nested              `protobuf:"bytes,1,rep,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumnRepeatedNestedMessage) Reset() {
	*x = RowColumnRepeatedNestedMessage{}
	mi := &file_tests_testing_nested_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumnRepeatedNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumnRepeatedNestedMessage) ProtoMessage() {}

func (x *RowColumnRepeatedNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_nested_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumnRepeatedNestedMessage.ProtoReflect.Descriptor instead.
func (*RowColumnRepeatedNestedMessage) Descriptor() ([]byte, []int) {
	return file_tests_testing_nested_proto_rawDescGZIP(), []int{1}
}

func (x *RowColumnRepeatedNestedMessage) GetNested() []*Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

type RowColumnNestedRepeatedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nested        *Repeated              `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumnNestedRepeatedMessage) Reset() {
	*x = RowColumnNestedRepeatedMessage{}
	mi := &file_tests_testing_nested_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumnNestedRepeatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumnNestedRepeatedMessage) ProtoMessage() {}

func (x *RowColumnNestedRepeatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_nested_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumnNestedRepeatedMessage.ProtoReflect.Descriptor instead.
func (*RowColumnNestedRepeatedMessage) Descriptor() ([]byte, []int) {
	return file_tests_testing_nested_proto_rawDescGZIP(), []int{2}
}

func (x *RowColumnNestedRepeatedMessage) GetNested() *Repeated {
	if x != nil {
		return x.Nested
	}
	return nil
}

type Nested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Nested) Reset() {
	*x = Nested{}
	mi := &file_tests_testing_nested_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_nested_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_tests_testing_nested_proto_rawDescGZIP(), []int{3}
}

func (x *Nested) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Repeated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []string               `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Repeated) Reset() {
	*x = Repeated{}
	mi := &file_tests_testing_nested_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeated) ProtoMessage() {}

func (x *Repeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_nested_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeated.ProtoReflect.Descriptor instead.
func (*Repeated) Descriptor() ([]byte, []int) {
	return file_tests_testing_nested_proto_rawDescGZIP(), []int{4}
}

func (x *Repeated) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_tests_testing_nested_proto protoreflect.FileDescriptor

var file_tests_testing_nested_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x73, 0x66,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x15,
	0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x16, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x40, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x6d, 0x0a, 0x1e,
	0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73,
	0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x6f, 0x0a, 0x1e, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x1e, 0x0a, 0x06,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e,
	0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x3b, 0x70, 0x62, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tests_testing_nested_proto_rawDescOnce sync.Once
	file_tests_testing_nested_proto_rawDescData []byte
)

func file_tests_testing_nested_proto_rawDescGZIP() []byte {
	file_tests_testing_nested_proto_rawDescOnce.Do(func() {
		file_tests_testing_nested_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tests_testing_nested_proto_rawDesc), len(file_tests_testing_nested_proto_rawDesc)))
	})
	return file_tests_testing_nested_proto_rawDescData
}

var file_tests_testing_nested_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tests_testing_nested_proto_goTypes = []any{
	(*RowColumnNestedMessage)(nil),         // 0: sf.substreams.sink.files.testing.RowColumnNestedMessage
	(*RowColumnRepeatedNestedMessage)(nil), // 1: sf.substreams.sink.files.testing.RowColumnRepeatedNestedMessage
	(*RowColumnNestedRepeatedMessage)(nil), // 2: sf.substreams.sink.files.testing.RowColumnNestedRepeatedMessage
	(*Nested)(nil),                         // 3: sf.substreams.sink.files.testing.Nested
	(*Repeated)(nil),                       // 4: sf.substreams.sink.files.testing.Repeated
}
var file_tests_testing_nested_proto_depIdxs = []int32{
	3, // 0: sf.substreams.sink.files.testing.RowColumnNestedMessage.nested:type_name -> sf.substreams.sink.files.testing.Nested
	3, // 1: sf.substreams.sink.files.testing.RowColumnRepeatedNestedMessage.nested:type_name -> sf.substreams.sink.files.testing.Nested
	4, // 2: sf.substreams.sink.files.testing.RowColumnNestedRepeatedMessage.nested:type_name -> sf.substreams.sink.files.testing.Repeated
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_tests_testing_nested_proto_init() }
func file_tests_testing_nested_proto_init() {
	if File_tests_testing_nested_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tests_testing_nested_proto_rawDesc), len(file_tests_testing_nested_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_testing_nested_proto_goTypes,
		DependencyIndexes: file_tests_testing_nested_proto_depIdxs,
		MessageInfos:      file_tests_testing_nested_proto_msgTypes,
	}.Build()
	File_tests_testing_nested_proto = out.File
	file_tests_testing_nested_proto_goTypes = nil
	file_tests_testing_nested_proto_depIdxs = nil
}
