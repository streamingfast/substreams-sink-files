// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: tests/testing_compression.proto

package pbtesting

import (
	_ "github.com/streamingfast/substreams-sink-files/pb/parquet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RowColumnCompressionZstd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumnCompressionZstd) Reset() {
	*x = RowColumnCompressionZstd{}
	mi := &file_tests_testing_compression_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumnCompressionZstd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumnCompressionZstd) ProtoMessage() {}

func (x *RowColumnCompressionZstd) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_compression_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumnCompressionZstd.ProtoReflect.Descriptor instead.
func (*RowColumnCompressionZstd) Descriptor() ([]byte, []int) {
	return file_tests_testing_compression_proto_rawDescGZIP(), []int{0}
}

func (x *RowColumnCompressionZstd) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RowNestedCompressionInvalid struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *Nested                `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowNestedCompressionInvalid) Reset() {
	*x = RowNestedCompressionInvalid{}
	mi := &file_tests_testing_compression_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowNestedCompressionInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowNestedCompressionInvalid) ProtoMessage() {}

func (x *RowNestedCompressionInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_compression_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowNestedCompressionInvalid.ProtoReflect.Descriptor instead.
func (*RowNestedCompressionInvalid) Descriptor() ([]byte, []int) {
	return file_tests_testing_compression_proto_rawDescGZIP(), []int{1}
}

func (x *RowNestedCompressionInvalid) GetValue() *Nested {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_tests_testing_compression_proto protoreflect.FileDescriptor

var file_tests_testing_compression_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x20, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x15, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x18, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5a, 0x73,
	0x74, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xc2, 0x84, 0x8c, 0x02, 0x02, 0x18, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x71, 0x0a, 0x1b, 0x52, 0x6f, 0x77, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x07, 0xc2, 0x84, 0x8c, 0x02, 0x02,
	0x18, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x69, 0x6e, 0x6b,
	0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3b, 0x70, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tests_testing_compression_proto_rawDescOnce sync.Once
	file_tests_testing_compression_proto_rawDescData []byte
)

func file_tests_testing_compression_proto_rawDescGZIP() []byte {
	file_tests_testing_compression_proto_rawDescOnce.Do(func() {
		file_tests_testing_compression_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tests_testing_compression_proto_rawDesc), len(file_tests_testing_compression_proto_rawDesc)))
	})
	return file_tests_testing_compression_proto_rawDescData
}

var file_tests_testing_compression_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tests_testing_compression_proto_goTypes = []any{
	(*RowColumnCompressionZstd)(nil),    // 0: sf.substreams.sink.files.testing.RowColumnCompressionZstd
	(*RowNestedCompressionInvalid)(nil), // 1: sf.substreams.sink.files.testing.RowNestedCompressionInvalid
	(*Nested)(nil),                      // 2: sf.substreams.sink.files.testing.Nested
}
var file_tests_testing_compression_proto_depIdxs = []int32{
	2, // 0: sf.substreams.sink.files.testing.RowNestedCompressionInvalid.value:type_name -> sf.substreams.sink.files.testing.Nested
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tests_testing_compression_proto_init() }
func file_tests_testing_compression_proto_init() {
	if File_tests_testing_compression_proto != nil {
		return
	}
	file_tests_testing_nested_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tests_testing_compression_proto_rawDesc), len(file_tests_testing_compression_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_testing_compression_proto_goTypes,
		DependencyIndexes: file_tests_testing_compression_proto_depIdxs,
		MessageInfos:      file_tests_testing_compression_proto_msgTypes,
	}.Build()
	File_tests_testing_compression_proto = out.File
	file_tests_testing_compression_proto_goTypes = nil
	file_tests_testing_compression_proto_depIdxs = nil
}
