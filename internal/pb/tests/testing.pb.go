// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.3
// source: tests/testing.proto

// The `sf.substreams.sink.files.v1` package can be use in your Substreams to defined a `map` module
// whose output type will be one of the message defined in the package. The `substreams-sink-files`
// binary will then consume your module's output to create the files containing your extracted data.
//
// The current package supports a single output format which is the `Lines` message which represents
// a list of plain-text "line" that should be appended together in a single bundle.

package pbtesting

import (
	_ "github.com/streamingfast/substreams-sink-files/pb/parquet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SingleRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Row `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *SingleRepeated) Reset() {
	*x = SingleRepeated{}
	mi := &file_tests_testing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRepeated) ProtoMessage() {}

func (x *SingleRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRepeated.ProtoReflect.Descriptor instead.
func (*SingleRepeated) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{0}
}

func (x *SingleRepeated) GetElements() []*Row {
	if x != nil {
		return x.Elements
	}
	return nil
}

type MultipleRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableA []*Row `protobuf:"bytes,1,rep,name=table_a,json=tableA,proto3" json:"table_a,omitempty"`
	TableB []*Row `protobuf:"bytes,2,rep,name=table_b,json=tableB,proto3" json:"table_b,omitempty"`
	TableC []*Row `protobuf:"bytes,3,rep,name=table_c,json=tableC,proto3" json:"table_c,omitempty"`
}

func (x *MultipleRepeated) Reset() {
	*x = MultipleRepeated{}
	mi := &file_tests_testing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleRepeated) ProtoMessage() {}

func (x *MultipleRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleRepeated.ProtoReflect.Descriptor instead.
func (*MultipleRepeated) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{1}
}

func (x *MultipleRepeated) GetTableA() []*Row {
	if x != nil {
		return x.TableA
	}
	return nil
}

func (x *MultipleRepeated) GetTableB() []*Row {
	if x != nil {
		return x.TableB
	}
	return nil
}

func (x *MultipleRepeated) GetTableC() []*Row {
	if x != nil {
		return x.TableC
	}
	return nil
}

type FromTablesFlat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row *RowT `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *FromTablesFlat) Reset() {
	*x = FromTablesFlat{}
	mi := &file_tests_testing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromTablesFlat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTablesFlat) ProtoMessage() {}

func (x *FromTablesFlat) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTablesFlat.ProtoReflect.Descriptor instead.
func (*FromTablesFlat) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{2}
}

func (x *FromTablesFlat) GetRow() *RowT {
	if x != nil {
		return x.Row
	}
	return nil
}

type FromTablesRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Named elements to ensure that tables is still `rows` as defined in RowT parquet.table_name
	Elements []*RowT `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *FromTablesRepeated) Reset() {
	*x = FromTablesRepeated{}
	mi := &file_tests_testing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromTablesRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTablesRepeated) ProtoMessage() {}

func (x *FromTablesRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTablesRepeated.ProtoReflect.Descriptor instead.
func (*FromTablesRepeated) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{3}
}

func (x *FromTablesRepeated) GetElements() []*RowT {
	if x != nil {
		return x.Elements
	}
	return nil
}

type FromTablesRepeatedWithIgnore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*RowT       `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	Ignored  []*IgnoredRow `protobuf:"bytes,2,rep,name=ignored,proto3" json:"ignored,omitempty"`
}

func (x *FromTablesRepeatedWithIgnore) Reset() {
	*x = FromTablesRepeatedWithIgnore{}
	mi := &file_tests_testing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromTablesRepeatedWithIgnore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTablesRepeatedWithIgnore) ProtoMessage() {}

func (x *FromTablesRepeatedWithIgnore) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTablesRepeatedWithIgnore.ProtoReflect.Descriptor instead.
func (*FromTablesRepeatedWithIgnore) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{4}
}

func (x *FromTablesRepeatedWithIgnore) GetElements() []*RowT {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *FromTablesRepeatedWithIgnore) GetIgnored() []*IgnoredRow {
	if x != nil {
		return x.Ignored
	}
	return nil
}

type FromTablesNestedFlat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested *NestedFlat `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
}

func (x *FromTablesNestedFlat) Reset() {
	*x = FromTablesNestedFlat{}
	mi := &file_tests_testing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromTablesNestedFlat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTablesNestedFlat) ProtoMessage() {}

func (x *FromTablesNestedFlat) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTablesNestedFlat.ProtoReflect.Descriptor instead.
func (*FromTablesNestedFlat) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{5}
}

func (x *FromTablesNestedFlat) GetNested() *NestedFlat {
	if x != nil {
		return x.Nested
	}
	return nil
}

type FromTablesNestedRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested *NestedRepeated `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
}

func (x *FromTablesNestedRepeated) Reset() {
	*x = FromTablesNestedRepeated{}
	mi := &file_tests_testing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromTablesNestedRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTablesNestedRepeated) ProtoMessage() {}

func (x *FromTablesNestedRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTablesNestedRepeated.ProtoReflect.Descriptor instead.
func (*FromTablesNestedRepeated) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{6}
}

func (x *FromTablesNestedRepeated) GetNested() *NestedRepeated {
	if x != nil {
		return x.Nested
	}
	return nil
}

type NestedFlat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row *RowT `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *NestedFlat) Reset() {
	*x = NestedFlat{}
	mi := &file_tests_testing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedFlat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedFlat) ProtoMessage() {}

func (x *NestedFlat) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedFlat.ProtoReflect.Descriptor instead.
func (*NestedFlat) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{7}
}

func (x *NestedFlat) GetRow() *RowT {
	if x != nil {
		return x.Row
	}
	return nil
}

type NestedRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*RowT `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *NestedRepeated) Reset() {
	*x = NestedRepeated{}
	mi := &file_tests_testing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedRepeated) ProtoMessage() {}

func (x *NestedRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedRepeated.ProtoReflect.Descriptor instead.
func (*NestedRepeated) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{8}
}

func (x *NestedRepeated) GetElements() []*RowT {
	if x != nil {
		return x.Elements
	}
	return nil
}

// Keep in sync with the RowT below, they must be kept in sync for tests to work properly
type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeString    string                 `protobuf:"bytes,1,opt,name=typeString,proto3" json:"typeString,omitempty"`
	TypeInt32     int32                  `protobuf:"varint,2,opt,name=typeInt32,proto3" json:"typeInt32,omitempty"`
	TypeInt64     int64                  `protobuf:"varint,3,opt,name=typeInt64,proto3" json:"typeInt64,omitempty"`
	TypeUint32    uint32                 `protobuf:"varint,4,opt,name=typeUint32,proto3" json:"typeUint32,omitempty"`
	TypeUint64    uint64                 `protobuf:"varint,5,opt,name=typeUint64,proto3" json:"typeUint64,omitempty"`
	TypeSint32    int32                  `protobuf:"zigzag32,6,opt,name=typeSint32,proto3" json:"typeSint32,omitempty"`
	TypeSint64    int64                  `protobuf:"zigzag64,7,opt,name=typeSint64,proto3" json:"typeSint64,omitempty"`
	TypeFixed32   uint32                 `protobuf:"fixed32,8,opt,name=typeFixed32,proto3" json:"typeFixed32,omitempty"`
	TypeFixed64   uint64                 `protobuf:"fixed64,9,opt,name=typeFixed64,proto3" json:"typeFixed64,omitempty"`
	TypeSfixed32  int32                  `protobuf:"fixed32,10,opt,name=typeSfixed32,proto3" json:"typeSfixed32,omitempty"`
	TypeSfixed64  int64                  `protobuf:"fixed64,11,opt,name=typeSfixed64,proto3" json:"typeSfixed64,omitempty"`
	TypeFloat     float32                `protobuf:"fixed32,12,opt,name=typeFloat,proto3" json:"typeFloat,omitempty"`
	TypeDouble    float64                `protobuf:"fixed64,13,opt,name=typeDouble,proto3" json:"typeDouble,omitempty"`
	TypeBool      bool                   `protobuf:"varint,14,opt,name=typeBool,proto3" json:"typeBool,omitempty"`
	TypeBytes     []byte                 `protobuf:"bytes,15,opt,name=typeBytes,proto3" json:"typeBytes,omitempty"`
	TypeTimestamp *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=typeTimestamp,proto3" json:"typeTimestamp,omitempty"`
	// Ensure ignored is correctly implemented
	Ignored bool `protobuf:"varint,64,opt,name=ignored,proto3" json:"ignored,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	mi := &file_tests_testing_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{9}
}

func (x *Row) GetTypeString() string {
	if x != nil {
		return x.TypeString
	}
	return ""
}

func (x *Row) GetTypeInt32() int32 {
	if x != nil {
		return x.TypeInt32
	}
	return 0
}

func (x *Row) GetTypeInt64() int64 {
	if x != nil {
		return x.TypeInt64
	}
	return 0
}

func (x *Row) GetTypeUint32() uint32 {
	if x != nil {
		return x.TypeUint32
	}
	return 0
}

func (x *Row) GetTypeUint64() uint64 {
	if x != nil {
		return x.TypeUint64
	}
	return 0
}

func (x *Row) GetTypeSint32() int32 {
	if x != nil {
		return x.TypeSint32
	}
	return 0
}

func (x *Row) GetTypeSint64() int64 {
	if x != nil {
		return x.TypeSint64
	}
	return 0
}

func (x *Row) GetTypeFixed32() uint32 {
	if x != nil {
		return x.TypeFixed32
	}
	return 0
}

func (x *Row) GetTypeFixed64() uint64 {
	if x != nil {
		return x.TypeFixed64
	}
	return 0
}

func (x *Row) GetTypeSfixed32() int32 {
	if x != nil {
		return x.TypeSfixed32
	}
	return 0
}

func (x *Row) GetTypeSfixed64() int64 {
	if x != nil {
		return x.TypeSfixed64
	}
	return 0
}

func (x *Row) GetTypeFloat() float32 {
	if x != nil {
		return x.TypeFloat
	}
	return 0
}

func (x *Row) GetTypeDouble() float64 {
	if x != nil {
		return x.TypeDouble
	}
	return 0
}

func (x *Row) GetTypeBool() bool {
	if x != nil {
		return x.TypeBool
	}
	return false
}

func (x *Row) GetTypeBytes() []byte {
	if x != nil {
		return x.TypeBytes
	}
	return nil
}

func (x *Row) GetTypeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TypeTimestamp
	}
	return nil
}

func (x *Row) GetIgnored() bool {
	if x != nil {
		return x.Ignored
	}
	return false
}

// Kept in sync with the Row message, we use RowT to test the parquet.table_name option
type RowT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeString    string                 `protobuf:"bytes,1,opt,name=typeString,proto3" json:"typeString,omitempty"`
	TypeInt32     int32                  `protobuf:"varint,2,opt,name=typeInt32,proto3" json:"typeInt32,omitempty"`
	TypeInt64     int64                  `protobuf:"varint,3,opt,name=typeInt64,proto3" json:"typeInt64,omitempty"`
	TypeUint32    uint32                 `protobuf:"varint,4,opt,name=typeUint32,proto3" json:"typeUint32,omitempty"`
	TypeUint64    uint64                 `protobuf:"varint,5,opt,name=typeUint64,proto3" json:"typeUint64,omitempty"`
	TypeSint32    int32                  `protobuf:"zigzag32,6,opt,name=typeSint32,proto3" json:"typeSint32,omitempty"`
	TypeSint64    int64                  `protobuf:"zigzag64,7,opt,name=typeSint64,proto3" json:"typeSint64,omitempty"`
	TypeFixed32   uint32                 `protobuf:"fixed32,8,opt,name=typeFixed32,proto3" json:"typeFixed32,omitempty"`
	TypeFixed64   uint64                 `protobuf:"fixed64,9,opt,name=typeFixed64,proto3" json:"typeFixed64,omitempty"`
	TypeSfixed32  int32                  `protobuf:"fixed32,10,opt,name=typeSfixed32,proto3" json:"typeSfixed32,omitempty"`
	TypeSfixed64  int64                  `protobuf:"fixed64,11,opt,name=typeSfixed64,proto3" json:"typeSfixed64,omitempty"`
	TypeFloat     float32                `protobuf:"fixed32,12,opt,name=typeFloat,proto3" json:"typeFloat,omitempty"`
	TypeDouble    float64                `protobuf:"fixed64,13,opt,name=typeDouble,proto3" json:"typeDouble,omitempty"`
	TypeBool      bool                   `protobuf:"varint,14,opt,name=typeBool,proto3" json:"typeBool,omitempty"`
	TypeBytes     []byte                 `protobuf:"bytes,15,opt,name=typeBytes,proto3" json:"typeBytes,omitempty"`
	TypeTimestamp *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=typeTimestamp,proto3" json:"typeTimestamp,omitempty"`
	// Ensure ignored is correctly implemented
	Ignored bool `protobuf:"varint,64,opt,name=ignored,proto3" json:"ignored,omitempty"`
}

func (x *RowT) Reset() {
	*x = RowT{}
	mi := &file_tests_testing_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowT) ProtoMessage() {}

func (x *RowT) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowT.ProtoReflect.Descriptor instead.
func (*RowT) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{10}
}

func (x *RowT) GetTypeString() string {
	if x != nil {
		return x.TypeString
	}
	return ""
}

func (x *RowT) GetTypeInt32() int32 {
	if x != nil {
		return x.TypeInt32
	}
	return 0
}

func (x *RowT) GetTypeInt64() int64 {
	if x != nil {
		return x.TypeInt64
	}
	return 0
}

func (x *RowT) GetTypeUint32() uint32 {
	if x != nil {
		return x.TypeUint32
	}
	return 0
}

func (x *RowT) GetTypeUint64() uint64 {
	if x != nil {
		return x.TypeUint64
	}
	return 0
}

func (x *RowT) GetTypeSint32() int32 {
	if x != nil {
		return x.TypeSint32
	}
	return 0
}

func (x *RowT) GetTypeSint64() int64 {
	if x != nil {
		return x.TypeSint64
	}
	return 0
}

func (x *RowT) GetTypeFixed32() uint32 {
	if x != nil {
		return x.TypeFixed32
	}
	return 0
}

func (x *RowT) GetTypeFixed64() uint64 {
	if x != nil {
		return x.TypeFixed64
	}
	return 0
}

func (x *RowT) GetTypeSfixed32() int32 {
	if x != nil {
		return x.TypeSfixed32
	}
	return 0
}

func (x *RowT) GetTypeSfixed64() int64 {
	if x != nil {
		return x.TypeSfixed64
	}
	return 0
}

func (x *RowT) GetTypeFloat() float32 {
	if x != nil {
		return x.TypeFloat
	}
	return 0
}

func (x *RowT) GetTypeDouble() float64 {
	if x != nil {
		return x.TypeDouble
	}
	return 0
}

func (x *RowT) GetTypeBool() bool {
	if x != nil {
		return x.TypeBool
	}
	return false
}

func (x *RowT) GetTypeBytes() []byte {
	if x != nil {
		return x.TypeBytes
	}
	return nil
}

func (x *RowT) GetTypeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TypeTimestamp
	}
	return nil
}

func (x *RowT) GetIgnored() bool {
	if x != nil {
		return x.Ignored
	}
	return false
}

type IgnoredRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IgnoredRow) Reset() {
	*x = IgnoredRow{}
	mi := &file_tests_testing_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IgnoredRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoredRow) ProtoMessage() {}

func (x *IgnoredRow) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoredRow.ProtoReflect.Descriptor instead.
func (*IgnoredRow) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{11}
}

func (x *IgnoredRow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_tests_testing_proto protoreflect.FileDescriptor

var file_tests_testing_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x53, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x22, 0x4a, 0x0a, 0x0e, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x72,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x77, 0x54,
	0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x58, 0x0a, 0x12, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x6f, 0x77, 0x54, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x1c, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x12, 0x42, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x77, 0x54, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x14,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x46, 0x6c, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x74, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x18, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x22, 0x46, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x38,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x6f, 0x77, 0x54, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x54, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x6f, 0x77, 0x54, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc8,
	0x04, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xb8, 0x84, 0x8c, 0x02, 0x01,
	0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x22, 0xd4, 0x04, 0x0a, 0x04, 0x52, 0x6f,
	0x77, 0x54, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xb8, 0x84, 0x8c, 0x02, 0x01, 0x52, 0x07, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x64, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x4e,
	0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x3b, 0x70, 0x62, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_testing_proto_rawDescOnce sync.Once
	file_tests_testing_proto_rawDescData = file_tests_testing_proto_rawDesc
)

func file_tests_testing_proto_rawDescGZIP() []byte {
	file_tests_testing_proto_rawDescOnce.Do(func() {
		file_tests_testing_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_testing_proto_rawDescData)
	})
	return file_tests_testing_proto_rawDescData
}

var file_tests_testing_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tests_testing_proto_goTypes = []any{
	(*SingleRepeated)(nil),               // 0: sf.substreams.sink.files.testing.SingleRepeated
	(*MultipleRepeated)(nil),             // 1: sf.substreams.sink.files.testing.MultipleRepeated
	(*FromTablesFlat)(nil),               // 2: sf.substreams.sink.files.testing.FromTablesFlat
	(*FromTablesRepeated)(nil),           // 3: sf.substreams.sink.files.testing.FromTablesRepeated
	(*FromTablesRepeatedWithIgnore)(nil), // 4: sf.substreams.sink.files.testing.FromTablesRepeatedWithIgnore
	(*FromTablesNestedFlat)(nil),         // 5: sf.substreams.sink.files.testing.FromTablesNestedFlat
	(*FromTablesNestedRepeated)(nil),     // 6: sf.substreams.sink.files.testing.FromTablesNestedRepeated
	(*NestedFlat)(nil),                   // 7: sf.substreams.sink.files.testing.NestedFlat
	(*NestedRepeated)(nil),               // 8: sf.substreams.sink.files.testing.NestedRepeated
	(*Row)(nil),                          // 9: sf.substreams.sink.files.testing.Row
	(*RowT)(nil),                         // 10: sf.substreams.sink.files.testing.RowT
	(*IgnoredRow)(nil),                   // 11: sf.substreams.sink.files.testing.IgnoredRow
	(*timestamppb.Timestamp)(nil),        // 12: google.protobuf.Timestamp
}
var file_tests_testing_proto_depIdxs = []int32{
	9,  // 0: sf.substreams.sink.files.testing.SingleRepeated.elements:type_name -> sf.substreams.sink.files.testing.Row
	9,  // 1: sf.substreams.sink.files.testing.MultipleRepeated.table_a:type_name -> sf.substreams.sink.files.testing.Row
	9,  // 2: sf.substreams.sink.files.testing.MultipleRepeated.table_b:type_name -> sf.substreams.sink.files.testing.Row
	9,  // 3: sf.substreams.sink.files.testing.MultipleRepeated.table_c:type_name -> sf.substreams.sink.files.testing.Row
	10, // 4: sf.substreams.sink.files.testing.FromTablesFlat.row:type_name -> sf.substreams.sink.files.testing.RowT
	10, // 5: sf.substreams.sink.files.testing.FromTablesRepeated.elements:type_name -> sf.substreams.sink.files.testing.RowT
	10, // 6: sf.substreams.sink.files.testing.FromTablesRepeatedWithIgnore.elements:type_name -> sf.substreams.sink.files.testing.RowT
	11, // 7: sf.substreams.sink.files.testing.FromTablesRepeatedWithIgnore.ignored:type_name -> sf.substreams.sink.files.testing.IgnoredRow
	7,  // 8: sf.substreams.sink.files.testing.FromTablesNestedFlat.nested:type_name -> sf.substreams.sink.files.testing.NestedFlat
	8,  // 9: sf.substreams.sink.files.testing.FromTablesNestedRepeated.nested:type_name -> sf.substreams.sink.files.testing.NestedRepeated
	10, // 10: sf.substreams.sink.files.testing.NestedFlat.row:type_name -> sf.substreams.sink.files.testing.RowT
	10, // 11: sf.substreams.sink.files.testing.NestedRepeated.elements:type_name -> sf.substreams.sink.files.testing.RowT
	12, // 12: sf.substreams.sink.files.testing.Row.typeTimestamp:type_name -> google.protobuf.Timestamp
	12, // 13: sf.substreams.sink.files.testing.RowT.typeTimestamp:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tests_testing_proto_init() }
func file_tests_testing_proto_init() {
	if File_tests_testing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_testing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_testing_proto_goTypes,
		DependencyIndexes: file_tests_testing_proto_depIdxs,
		MessageInfos:      file_tests_testing_proto_msgTypes,
	}.Build()
	File_tests_testing_proto = out.File
	file_tests_testing_proto_rawDesc = nil
	file_tests_testing_proto_goTypes = nil
	file_tests_testing_proto_depIdxs = nil
}
