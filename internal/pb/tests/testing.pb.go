// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: tests/testing.proto

// The `sf.substreams.sink.files.v1` package can be use in your Substreams to defined a `map` module
// whose output type will be one of the message defined in the package. The `substreams-sink-files`
// binary will then consume your module's output to create the files containing your extracted data.
//
// The current package supports a single output format which is the `Lines` message which represents
// a list of plain-text "line" that should be appended together in a single bundle.

package pbtesting

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Literals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Literal `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *Literals) Reset() {
	*x = Literals{}
	mi := &file_tests_testing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Literals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Literals) ProtoMessage() {}

func (x *Literals) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Literals.ProtoReflect.Descriptor instead.
func (*Literals) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{0}
}

func (x *Literals) GetElements() []*Literal {
	if x != nil {
		return x.Elements
	}
	return nil
}

type Literal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeString    string                 `protobuf:"bytes,1,opt,name=typeString,proto3" json:"typeString,omitempty"`
	TypeInt32     int32                  `protobuf:"varint,2,opt,name=typeInt32,proto3" json:"typeInt32,omitempty"`
	TypeInt64     int64                  `protobuf:"varint,3,opt,name=typeInt64,proto3" json:"typeInt64,omitempty"`
	TypeUint32    uint32                 `protobuf:"varint,4,opt,name=typeUint32,proto3" json:"typeUint32,omitempty"`
	TypeUint64    uint64                 `protobuf:"varint,5,opt,name=typeUint64,proto3" json:"typeUint64,omitempty"`
	TypeSint32    int32                  `protobuf:"zigzag32,6,opt,name=typeSint32,proto3" json:"typeSint32,omitempty"`
	TypeSint64    int64                  `protobuf:"zigzag64,7,opt,name=typeSint64,proto3" json:"typeSint64,omitempty"`
	TypeFixed32   uint32                 `protobuf:"fixed32,8,opt,name=typeFixed32,proto3" json:"typeFixed32,omitempty"`
	TypeFixed64   uint64                 `protobuf:"fixed64,9,opt,name=typeFixed64,proto3" json:"typeFixed64,omitempty"`
	TypeSfixed32  int32                  `protobuf:"fixed32,10,opt,name=typeSfixed32,proto3" json:"typeSfixed32,omitempty"`
	TypeSfixed64  int64                  `protobuf:"fixed64,11,opt,name=typeSfixed64,proto3" json:"typeSfixed64,omitempty"`
	TypeFloat     float32                `protobuf:"fixed32,12,opt,name=typeFloat,proto3" json:"typeFloat,omitempty"`
	TypeDouble    float64                `protobuf:"fixed64,13,opt,name=typeDouble,proto3" json:"typeDouble,omitempty"`
	TypeBool      bool                   `protobuf:"varint,14,opt,name=typeBool,proto3" json:"typeBool,omitempty"`
	TypeBytes     []byte                 `protobuf:"bytes,15,opt,name=typeBytes,proto3" json:"typeBytes,omitempty"`
	TypeTimestamp *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=typeTimestamp,proto3" json:"typeTimestamp,omitempty"`
}

func (x *Literal) Reset() {
	*x = Literal{}
	mi := &file_tests_testing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Literal) ProtoMessage() {}

func (x *Literal) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Literal.ProtoReflect.Descriptor instead.
func (*Literal) Descriptor() ([]byte, []int) {
	return file_tests_testing_proto_rawDescGZIP(), []int{1}
}

func (x *Literal) GetTypeString() string {
	if x != nil {
		return x.TypeString
	}
	return ""
}

func (x *Literal) GetTypeInt32() int32 {
	if x != nil {
		return x.TypeInt32
	}
	return 0
}

func (x *Literal) GetTypeInt64() int64 {
	if x != nil {
		return x.TypeInt64
	}
	return 0
}

func (x *Literal) GetTypeUint32() uint32 {
	if x != nil {
		return x.TypeUint32
	}
	return 0
}

func (x *Literal) GetTypeUint64() uint64 {
	if x != nil {
		return x.TypeUint64
	}
	return 0
}

func (x *Literal) GetTypeSint32() int32 {
	if x != nil {
		return x.TypeSint32
	}
	return 0
}

func (x *Literal) GetTypeSint64() int64 {
	if x != nil {
		return x.TypeSint64
	}
	return 0
}

func (x *Literal) GetTypeFixed32() uint32 {
	if x != nil {
		return x.TypeFixed32
	}
	return 0
}

func (x *Literal) GetTypeFixed64() uint64 {
	if x != nil {
		return x.TypeFixed64
	}
	return 0
}

func (x *Literal) GetTypeSfixed32() int32 {
	if x != nil {
		return x.TypeSfixed32
	}
	return 0
}

func (x *Literal) GetTypeSfixed64() int64 {
	if x != nil {
		return x.TypeSfixed64
	}
	return 0
}

func (x *Literal) GetTypeFloat() float32 {
	if x != nil {
		return x.TypeFloat
	}
	return 0
}

func (x *Literal) GetTypeDouble() float64 {
	if x != nil {
		return x.TypeDouble
	}
	return 0
}

func (x *Literal) GetTypeBool() bool {
	if x != nil {
		return x.TypeBool
	}
	return false
}

func (x *Literal) GetTypeBytes() []byte {
	if x != nil {
		return x.TypeBytes
	}
	return nil
}

func (x *Literal) GetTypeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TypeTimestamp
	}
	return nil
}

var File_tests_testing_proto protoreflect.FileDescriptor

var file_tests_testing_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x08, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xab, 0x04, 0x0a, 0x07,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x74,
	0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2d, 0x73, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3b,
	0x70, 0x62, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tests_testing_proto_rawDescOnce sync.Once
	file_tests_testing_proto_rawDescData = file_tests_testing_proto_rawDesc
)

func file_tests_testing_proto_rawDescGZIP() []byte {
	file_tests_testing_proto_rawDescOnce.Do(func() {
		file_tests_testing_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_testing_proto_rawDescData)
	})
	return file_tests_testing_proto_rawDescData
}

var file_tests_testing_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tests_testing_proto_goTypes = []any{
	(*Literals)(nil),              // 0: sf.substreams.sink.files.testing.Literals
	(*Literal)(nil),               // 1: sf.substreams.sink.files.testing.Literal
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_tests_testing_proto_depIdxs = []int32{
	1, // 0: sf.substreams.sink.files.testing.Literals.elements:type_name -> sf.substreams.sink.files.testing.Literal
	2, // 1: sf.substreams.sink.files.testing.Literal.typeTimestamp:type_name -> google.protobuf.Timestamp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tests_testing_proto_init() }
func file_tests_testing_proto_init() {
	if File_tests_testing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_testing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_testing_proto_goTypes,
		DependencyIndexes: file_tests_testing_proto_depIdxs,
		MessageInfos:      file_tests_testing_proto_msgTypes,
	}.Build()
	File_tests_testing_proto = out.File
	file_tests_testing_proto_rawDesc = nil
	file_tests_testing_proto_goTypes = nil
	file_tests_testing_proto_depIdxs = nil
}
