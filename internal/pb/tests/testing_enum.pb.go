// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: tests/testing_enum.proto

package pbtesting

import (
	_ "github.com/streamingfast/substreams-sink-files/pb/parquet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumValue int32

const (
	EnumValue_UNKNOWN EnumValue = 0
	EnumValue_FIRST   EnumValue = 1
	EnumValue_SECOND  EnumValue = 2
)

// Enum value maps for EnumValue.
var (
	EnumValue_name = map[int32]string{
		0: "UNKNOWN",
		1: "FIRST",
		2: "SECOND",
	}
	EnumValue_value = map[string]int32{
		"UNKNOWN": 0,
		"FIRST":   1,
		"SECOND":  2,
	}
)

func (x EnumValue) Enum() *EnumValue {
	p := new(EnumValue)
	*p = x
	return p
}

func (x EnumValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumValue) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_testing_enum_proto_enumTypes[0].Descriptor()
}

func (EnumValue) Type() protoreflect.EnumType {
	return &file_tests_testing_enum_proto_enumTypes[0]
}

func (x EnumValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumValue.Descriptor instead.
func (EnumValue) EnumDescriptor() ([]byte, []int) {
	return file_tests_testing_enum_proto_rawDescGZIP(), []int{0}
}

type RowColumEnumInside_Value int32

const (
	RowColumEnumInside_UNKNOWN RowColumEnumInside_Value = 0
	RowColumEnumInside_FIRST   RowColumEnumInside_Value = 1
	RowColumEnumInside_SECOND  RowColumEnumInside_Value = 2
)

// Enum value maps for RowColumEnumInside_Value.
var (
	RowColumEnumInside_Value_name = map[int32]string{
		0: "UNKNOWN",
		1: "FIRST",
		2: "SECOND",
	}
	RowColumEnumInside_Value_value = map[string]int32{
		"UNKNOWN": 0,
		"FIRST":   1,
		"SECOND":  2,
	}
)

func (x RowColumEnumInside_Value) Enum() *RowColumEnumInside_Value {
	p := new(RowColumEnumInside_Value)
	*p = x
	return p
}

func (x RowColumEnumInside_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowColumEnumInside_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_testing_enum_proto_enumTypes[1].Descriptor()
}

func (RowColumEnumInside_Value) Type() protoreflect.EnumType {
	return &file_tests_testing_enum_proto_enumTypes[1]
}

func (x RowColumEnumInside_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RowColumEnumInside_Value.Descriptor instead.
func (RowColumEnumInside_Value) EnumDescriptor() ([]byte, []int) {
	return file_tests_testing_enum_proto_rawDescGZIP(), []int{1, 0}
}

type RowColumEnumWithSkippedValue_Value int32

const (
	RowColumEnumWithSkippedValue_UNKNOWN RowColumEnumWithSkippedValue_Value = 0
	RowColumEnumWithSkippedValue_SECOND  RowColumEnumWithSkippedValue_Value = 2
)

// Enum value maps for RowColumEnumWithSkippedValue_Value.
var (
	RowColumEnumWithSkippedValue_Value_name = map[int32]string{
		0: "UNKNOWN",
		2: "SECOND",
	}
	RowColumEnumWithSkippedValue_Value_value = map[string]int32{
		"UNKNOWN": 0,
		"SECOND":  2,
	}
)

func (x RowColumEnumWithSkippedValue_Value) Enum() *RowColumEnumWithSkippedValue_Value {
	p := new(RowColumEnumWithSkippedValue_Value)
	*p = x
	return p
}

func (x RowColumEnumWithSkippedValue_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowColumEnumWithSkippedValue_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_testing_enum_proto_enumTypes[2].Descriptor()
}

func (RowColumEnumWithSkippedValue_Value) Type() protoreflect.EnumType {
	return &file_tests_testing_enum_proto_enumTypes[2]
}

func (x RowColumEnumWithSkippedValue_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RowColumEnumWithSkippedValue_Value.Descriptor instead.
func (RowColumEnumWithSkippedValue_Value) EnumDescriptor() ([]byte, []int) {
	return file_tests_testing_enum_proto_rawDescGZIP(), []int{2, 0}
}

type RowColumEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         EnumValue              `protobuf:"varint,1,opt,name=value,proto3,enum=sf.substreams.sink.files.testing.EnumValue" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumEnum) Reset() {
	*x = RowColumEnum{}
	mi := &file_tests_testing_enum_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumEnum) ProtoMessage() {}

func (x *RowColumEnum) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_enum_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumEnum.ProtoReflect.Descriptor instead.
func (*RowColumEnum) Descriptor() ([]byte, []int) {
	return file_tests_testing_enum_proto_rawDescGZIP(), []int{0}
}

func (x *RowColumEnum) GetValue() EnumValue {
	if x != nil {
		return x.Value
	}
	return EnumValue_UNKNOWN
}

type RowColumEnumInside struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Value         RowColumEnumInside_Value `protobuf:"varint,1,opt,name=value,proto3,enum=sf.substreams.sink.files.testing.RowColumEnumInside_Value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumEnumInside) Reset() {
	*x = RowColumEnumInside{}
	mi := &file_tests_testing_enum_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumEnumInside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumEnumInside) ProtoMessage() {}

func (x *RowColumEnumInside) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_enum_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumEnumInside.ProtoReflect.Descriptor instead.
func (*RowColumEnumInside) Descriptor() ([]byte, []int) {
	return file_tests_testing_enum_proto_rawDescGZIP(), []int{1}
}

func (x *RowColumEnumInside) GetValue() RowColumEnumInside_Value {
	if x != nil {
		return x.Value
	}
	return RowColumEnumInside_UNKNOWN
}

type RowColumEnumWithSkippedValue struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Value         RowColumEnumWithSkippedValue_Value `protobuf:"varint,1,opt,name=value,proto3,enum=sf.substreams.sink.files.testing.RowColumEnumWithSkippedValue_Value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowColumEnumWithSkippedValue) Reset() {
	*x = RowColumEnumWithSkippedValue{}
	mi := &file_tests_testing_enum_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowColumEnumWithSkippedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumEnumWithSkippedValue) ProtoMessage() {}

func (x *RowColumEnumWithSkippedValue) ProtoReflect() protoreflect.Message {
	mi := &file_tests_testing_enum_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumEnumWithSkippedValue.ProtoReflect.Descriptor instead.
func (*RowColumEnumWithSkippedValue) Descriptor() ([]byte, []int) {
	return file_tests_testing_enum_proto_rawDescGZIP(), []int{2}
}

func (x *RowColumEnumWithSkippedValue) GetValue() RowColumEnumWithSkippedValue_Value {
	if x != nil {
		return x.Value
	}
	return RowColumEnumWithSkippedValue_UNKNOWN
}

var File_tests_testing_enum_proto protoreflect.FileDescriptor

var file_tests_testing_enum_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x73, 0x66, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x15, 0x70, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x45, 0x6e,
	0x75, 0x6d, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x45,
	0x6e, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x45, 0x6e,
	0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x02, 0x3a, 0x09, 0xd2, 0xbe, 0xa5, 0x38, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x2a, 0x2f, 0x0a, 0x09,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x4e, 0x5a,
	0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x3b, 0x70, 0x62, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_tests_testing_enum_proto_rawDescOnce sync.Once
	file_tests_testing_enum_proto_rawDescData []byte
)

func file_tests_testing_enum_proto_rawDescGZIP() []byte {
	file_tests_testing_enum_proto_rawDescOnce.Do(func() {
		file_tests_testing_enum_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tests_testing_enum_proto_rawDesc), len(file_tests_testing_enum_proto_rawDesc)))
	})
	return file_tests_testing_enum_proto_rawDescData
}

var file_tests_testing_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tests_testing_enum_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tests_testing_enum_proto_goTypes = []any{
	(EnumValue)(0),                          // 0: sf.substreams.sink.files.testing.EnumValue
	(RowColumEnumInside_Value)(0),           // 1: sf.substreams.sink.files.testing.RowColumEnumInside.Value
	(RowColumEnumWithSkippedValue_Value)(0), // 2: sf.substreams.sink.files.testing.RowColumEnumWithSkippedValue.Value
	(*RowColumEnum)(nil),                    // 3: sf.substreams.sink.files.testing.RowColumEnum
	(*RowColumEnumInside)(nil),              // 4: sf.substreams.sink.files.testing.RowColumEnumInside
	(*RowColumEnumWithSkippedValue)(nil),    // 5: sf.substreams.sink.files.testing.RowColumEnumWithSkippedValue
}
var file_tests_testing_enum_proto_depIdxs = []int32{
	0, // 0: sf.substreams.sink.files.testing.RowColumEnum.value:type_name -> sf.substreams.sink.files.testing.EnumValue
	1, // 1: sf.substreams.sink.files.testing.RowColumEnumInside.value:type_name -> sf.substreams.sink.files.testing.RowColumEnumInside.Value
	2, // 2: sf.substreams.sink.files.testing.RowColumEnumWithSkippedValue.value:type_name -> sf.substreams.sink.files.testing.RowColumEnumWithSkippedValue.Value
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_tests_testing_enum_proto_init() }
func file_tests_testing_enum_proto_init() {
	if File_tests_testing_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tests_testing_enum_proto_rawDesc), len(file_tests_testing_enum_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_testing_enum_proto_goTypes,
		DependencyIndexes: file_tests_testing_enum_proto_depIdxs,
		EnumInfos:         file_tests_testing_enum_proto_enumTypes,
		MessageInfos:      file_tests_testing_enum_proto_msgTypes,
	}.Build()
	File_tests_testing_enum_proto = out.File
	file_tests_testing_enum_proto_goTypes = nil
	file_tests_testing_enum_proto_depIdxs = nil
}
